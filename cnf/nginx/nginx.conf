user www-data;
worker_processes auto;  # 接受接口响应的子进程个数
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;  # 一个子进程最大能同时连接多少个,gunicorn的该参数是指所有进程总的最大并发数
    # multi_accept on;
}

# HTTP代理
http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    include /etc/nginx/conf.d/*.conf;

    # Logging Settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Gzip Settings
    gzip on;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 反向代理保证内网的安全,实现负载均衡,常见正向代理比如VPN,翻墙
    upstream test{
        # 同一个用户(ip)会被转发到同一个服务器上,可以解决session跨服务器,灰度发版等问题,默认使用Round Robin(轮询)负载均衡策略
        ip_hash;
        # 把请求转发给连接数较少的服务器,此负载均衡策略适合请求处理时间长短不一造成服务器过载的情况
        # least_conn;
        # 自定义负载均衡策略
        # hash $request_uri consistent;
        # 如果nginx在30秒内3次未能向服务器发送请求或未收到服务器响应,则将服务器标记为30秒不可用,如果组中只有一台服务器,则忽略这2个参数
        server 1.2.3.4:8080 max_fails=3 fail_timeout=30s;
        # 权重默认值为1,此处访问到的概率是1/2,会受到ip_hash的影响
        server baidu.com weight=2;
        server qq.com;
    }
    
    server {
       listen 80 default_server;
       return https://cn.bing.com;
    }

    server {
        listen 5566;
        server_name kg.com abc.com;  # 也可以是ip,多个server_name用空格隔开
        access_log /var/log/nginx/acsing-access.log main;  # log_format中main的指定格式输出日志,每个server可以拥有独立的log
        error_log /var/log/nginx/acsing-error.log;

        location / {   # location ~ ^/show/v1/(.*)$
            proxy_pass http://test;  # 接收方nginx的server_name对应可以写成test
        }
        proxy_set_header Host $host;                   # 服务端可通过request.headers.get('Host')获取到服务的域名
        proxy_set_header X-Real-IP $remote_addr;       # 服务端可通过request.headers.get('X-Real-IP')获取到客户端IP
        proxy_set_header X-Forwarded-For $remote_addr; # 服务端可通过request.headers.get('X-Forwarded-For')获取到客户端IP,(记录一组Ip)
    }

    server {
        listen 443 ssl;
        ssl_certificate /etc/nginx/nginx.crt;
        ssl_certificate_key /etc/nginx/nginx.key;
        root /usr/share/nginx/html;  # 当收到请求时nginx会在这个目录中查找文件
        gzip on; # 减小传输数据大小,增大CPU消耗,默认只压缩MIME类型是text/html的响应

        location / {
            proxy_pass http://127.0.0.1:7000;
        }
        location ~ \.(js|css|png|jpg|gif|ico) {
            root /root/mysite/static;
            expires 30d;
        }
    }
}

# TCP代理,可以代理mysql,redis等
stream{
    upstream backend-mysql{
        server localhost:3306;
        server localhost:3307;
    }
    server{
        listen 13306;
        # proxy_pass localhost:3306;
        proxy_pass backend-mysql;
    }
}


# location = patt{}  精准匹配
# location ~ patt{}  正则匹配(~*不区分大小写)
# location patt{}    一般匹配(前几个匹配上就行了)
# 精准匹配(一旦匹配上就返回,有序)> 正则表达式(一旦匹配到就不再匹配,有序) >一般匹配(谁匹配的最长谁说了算,无序)

# nginx -c /usr/local/etc/nginx/nginx.conf
# nginx -t # 检测配置文件是否有效
# nginx -s reload # 更改配置重启nginx
# http层可以拥有多个server,同一个server下可以有不同的location,server间listen+server_name必须唯一
# 如果可以匹配到任何一个server,则使用此server,否则匹配第一个server块,不论server_name是否匹配
# nginx默认主页文件路径: /usr/share/nginx/html/index.html
# 浏览器访问网站时并不会每次都去解析域名,当本地/etc/hosts文件域名映射更改时需要等一会
# nginx除了反向代理,负载均衡,https加密外,还可以处理静态资源(js,jpg,css,png,gif,ico),非静态资源通过反向代理交给gunicorn处理

# https认证流程：
# 1、服务器生成一对密钥,私钥自己留着,公钥交给数字证书认证机构(CA）
# 2、CA进行审核,并用CA自己的私钥对服务器提供的公钥进行签名生成数字证书
# 3、在https建立连接时,客户端从服务器获取数字证书,用CA的公钥(根证书)对数字证书进行验证,比对一致,说明该数字证书确实是CA颁发
# 前提:
# 客户端的CA公钥确实是CA的公钥,即该CA的公钥与CA对服务器提供的公钥进行签名的私钥确实是一对,而CA又作为权威机构保证该公钥的确是服务器端提供的,从而可以确认该证书中的公钥确实是合法服务器端提供的
# 注:
# 为保证第3步中提到的前提条件,CA的公钥必须要安全地转交给客户端(CA根证书必须先安装在客户端),因此CA的公钥一般来说由浏览器开发商内置在浏览器的内部,于是该前提条件在各种信任机制上,基本保证成立
# 步骤3中客户端已知道服务器身份可信,可以告诉服务器"接下来使用对称加密来通信,这是xxx算法和密钥",这一段信息使用公钥加密,因此只有服务器能解密,每个客户端都可以有自己的密钥和算法,接下来的通信便全部采用对称加密

# Charles抓包手机https请求步骤
# 1. 在Charles中,选择菜单的Proxy > SSL Proxying Settings,在弹出的对话框中,勾选Enable SSL Proxying,并添加您想要拦截HTTPS请求的主机和端口,*:*代表捕获所有HTTPS请求
# 2. 在Charles中,选择菜单的Help > SSL Proxying > Install Charles Root Certificate安装证书到您的电脑上,并信任它
# 3. 在手机端浏览器中输入http://charlesproxy.com/getssl,安装并信任Charles的根证书(iOS设备上还需进入设置以启用对该证书的完全信任)
# 4. 在手机端需要将WiFi代理设置为指向运行Charles的电脑的IP地址和端口(默认为8888)
# 说明: 抓电脑包只需要在Charles中,勾选菜单的Proxy > macOS Proxy即可
