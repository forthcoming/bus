[unix_http_server]
file=/var/run/supervisor.sock   ; (the path to the socket file)
chmod=0700                      ; socket file mode (default 0700)

[supervisord]
logfile=/var/log/supervisor/supervisord.log ; main log file;default $CWD/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10                          ; main logfile backups; 0 means none, default 10
loglevel=info                               ; log level; default info; others: debug,warn,trace
pidfile=/var/run/supervisord.pid            ; supervisord pidfile;default supervisord.pid
childlogdir=/var/log/supervisor             ; 'AUTO' child log dir, default $TEMP
nodaemon=false                              ; start in foreground if true; default false
minfds=1024                                 ; min. avail startup file descriptors; default 1024
minprocs=200                                ; min. avail process descriptors;default 200

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL for a unix socket


[program:redis]
command=/root/redis/bin/redis-server /root/redis/redis.conf
process_name=%(program_name)s
numprocs=1                                                 ; number of processes copies to start (def 1)
autostart=true                                             ; start at supervisord start (default: true)
startretries=3                                             ; max of serial start failures when starting (default 3)
autorestart=unexpected                                     ; 子进程结束后重启策略,false:不重启; true:重启; unexpected:当进程退出码不在exitcodes里面时才重启
exitcodes=0,2                                              ; 对应autorestart=unexpected,exitcodes里面定义的退出码是expected,os._exit(N),N就是退出码
redirect_stderr=true                                       ; redirect proc stderr to stdout (default false)
stdout_logfile=/var/log/supervisor/%(program_name)s.log    ; 只能捕获各进程输出到控制台的信息(eg: "logfile /usr/log"则无法获取)
stdout_logfile_maxbytes=16MB                               ; max logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=10                                  ; 0 means none, default 10
;directory=/usr/local/bin                                  ; directory to cwd to before exec (def no cwd)
;priority=999                                              ; the relative start priority (default 999)
;stopsignal=QUIT                                           ; 当收到stop请求时发送信号给程序(通知程序做结束前工作),默认是TERM信号,也可以是HUP,INT等
;user=chrism                                               ; setuid to this UNIX account to run the program
;stderr_logfile=/a/path                                    ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB                               ; max logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups=10                                 ; 0 means none, default 10

;[program:celery]
;command=celery -A sync_task.tasks worker -l=info -s web_demo/logs/celerybeat-schedule
;directory=/home/avatar/Atlas          ; celery需要指定目录为sync_task所在目录,gunicorn需要指定目录为web_demo所在目录
;process_name=%(program_name)s
;numprocs=1
;autostart=true
;startretries=3
;autorestart=unexpected
;redirect_stderr=true
;stdout_logfile=/var/log/supervisor/%(program_name)s.log
;stdout_logfile_maxbytes=8MB
;stdout_logfile_backups=5

[program:clash]
command=clash -f /etc/clash/clash.yaml
process_name=%(program_name)s
numprocs=1
autostart=true
startretries=9000 ; 首次启动会下载path=/root/.config/clash/Country.mmdb,可能失败因此重复多次
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB
stdout_logfile_backups=1

[program:tor]
command=tor -f /etc/tor/torrc
process_name=%(program_name)s
numprocs=1
autostart=true
startretries=3
autorestart=unexpected
redirect_stderr=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB
stdout_logfile_backups=1

[program:nginx]
command=nginx -g 'daemon off;' -c /etc/nginx/nginx.conf
process_name=%(program_name)s
numprocs=1
autostart=true
startretries=3
autorestart=unexpected
redirect_stderr=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB
stdout_logfile_backups=1

[program:redis_cluster7000]
command=/root/redis/bin/redis-server /root/redis_cluster/7000/redis.conf --daemonize no
numprocs=1
autostart=true
startretries=3
redirect_stderr=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB
stdout_logfile_backups=1

[program:redis_cluster7001]
command=/root/redis/bin/redis-server /root/redis_cluster/7001/redis.conf --daemonize no
numprocs=1
autostart=true
startretries=3
redirect_stderr=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB
stdout_logfile_backups=1

[program:redis_cluster7002]
command=/root/redis/bin/redis-server /root/redis_cluster/7002/redis.conf --daemonize no
numprocs=1
autostart=true
startretries=3
redirect_stderr=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB
stdout_logfile_backups=1

[program:redis_cluster7003]
command=/root/redis/bin/redis-server /root/redis_cluster/7003/redis.conf --daemonize no
numprocs=1
autostart=true
startretries=3
redirect_stderr=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB
stdout_logfile_backups=1

[program:redis_cluster7004]
command=/root/redis/bin/redis-server /root/redis_cluster/7004/redis.conf --daemonize no
numprocs=1
autostart=true
startretries=3
redirect_stderr=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB
stdout_logfile_backups=1

[program:redis_cluster7005]
command=/root/redis/bin/redis-server /root/redis_cluster/7005/redis.conf --daemonize no
numprocs=1
autostart=true
startretries=3
redirect_stderr=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB
stdout_logfile_backups=1

[group:rc]
programs=redis_cluster7000,redis_cluster7001,redis_cluster7002,redis_cluster7003,redis_cluster7004,redis_cluster7005


; pip install supervisor
; Comments must have a leading space: "a=b ;comment" not "a=b;comment".
; supervisord -c /etc/supervisor/supervisord.conf  # 启动服务端,所有程序以supervisord前台(无法监控后台程序)子进程方式启动
; supervisorctl -c /etc/supervisor/supervisord.conf  # 客户端连接
; supervisorctl update    # Reload config and add/remove as necessary, and will restart affected programs
; supervisorctl shutdown  # 停止supervisord服务
; supervisorctl tail -f 进程名 # 查看该进程的日志,进程名是[program:xx]中的xx
; supervisorctl reload # Restarts the remote supervisord
; supervisorctl status # 查看supervisor监管的进程状态
; supervisorctl start 进程名 # 启动进程
; supervisorctl stop 进程名 # 停止进程
; supervisorctl stop all # 停止全部进程,start、restart、stop都不会载入最新的配置文件
; supervisorctl restart rc: # 重启rc进程组程序
